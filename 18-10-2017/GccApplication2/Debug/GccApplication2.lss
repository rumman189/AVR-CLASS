
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065f  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001391  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms>:
#include <util/delay.h>
 

void delay_ms(unsigned int ms)
{
	while (ms)
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	41 f0       	breq	.+16     	; 0x80 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	ef e9       	ldi	r30, 0x9F	; 159
  72:	ff e0       	ldi	r31, 0x0F	; 15
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <delay_ms+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <delay_ms+0xe>
  7a:	00 00       	nop
	{
		_delay_ms(1.000);
		ms--;
  7c:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>
 

void delay_ms(unsigned int ms)
{
	while (ms)
  7e:	c1 f7       	brne	.-16     	; 0x70 <delay_ms+0x4>
  80:	08 95       	ret

00000082 <main>:
	}
}

int main(void)
{
	DDRD = 0xff;//Data direction register
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17
		
		for (int b=0; b<8; b++)
		{
			
			
			PORTD |= (1<<b);//PORT Output
  86:	01 e0       	ldi	r16, 0x01	; 1
  88:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0xff;//Data direction register
	while (1)
	
	{
		
		for (int b=0; b<8; b++)
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			
			
			PORTD |= (1<<b);//PORT Output
  8e:	22 b3       	in	r18, 0x12	; 18
  90:	c8 01       	movw	r24, r16
  92:	0c 2e       	mov	r0, r28
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x18>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <main+0x14>
  9e:	82 2b       	or	r24, r18
  a0:	82 bb       	out	0x12, r24	; 18
			delay_ms(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
			PORTD &= (0<<b);//PORT Output
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	12 ba       	out	0x12, r1	; 18
			delay_ms(1000);
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
	DDRD = 0xff;//Data direction register
	while (1)
	
	{
		
		for (int b=0; b<8; b++)
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	c8 30       	cpi	r28, 0x08	; 8
  ba:	d1 05       	cpc	r29, r1
  bc:	41 f7       	brne	.-48     	; 0x8e <main+0xc>
  be:	e5 cf       	rjmp	.-54     	; 0x8a <main+0x8>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
