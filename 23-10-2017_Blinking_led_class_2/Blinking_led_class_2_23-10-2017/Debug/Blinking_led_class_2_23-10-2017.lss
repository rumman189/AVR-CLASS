
Blinking_led_class_2_23-10-2017.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000659  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRD = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	/* Replace with your application code */
    while (1) 
    {
		for (int i=0; i<8; i++)
		{
				PORTD |= (1<<i);
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	70 e0       	ldi	r23, 0x00	; 0
{
    DDRD = 0xff;
	/* Replace with your application code */
    while (1) 
    {
		for (int i=0; i<8; i++)
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
		{
				PORTD |= (1<<i);
  78:	42 b3       	in	r20, 0x12	; 18
  7a:	9b 01       	movw	r18, r22
  7c:	08 2e       	mov	r0, r24
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <main+0x14>
  88:	24 2b       	or	r18, r20
  8a:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	34 e3       	ldi	r19, 0x34	; 52
  90:	4c e0       	ldi	r20, 0x0C	; 12
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
{
    DDRD = 0xff;
	/* Replace with your application code */
    while (1) 
    {
		for (int i=0; i<8; i++)
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	91 05       	cpc	r25, r1
  a4:	49 f7       	brne	.-46     	; 0x78 <main+0xc>
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(500);
		}
		
		for (int k=7; k>=0; k--)
		{
			PORTD &=~ (1<<k);
  aa:	32 b3       	in	r19, 0x12	; 18
  ac:	ab 01       	movw	r20, r22
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x4a>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x46>
  ba:	24 2f       	mov	r18, r20
  bc:	20 95       	com	r18
  be:	23 23       	and	r18, r19
  c0:	22 bb       	out	0x12, r18	; 18
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	34 e3       	ldi	r19, 0x34	; 52
  c6:	4c e0       	ldi	r20, 0x0C	; 12
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	40 40       	sbci	r20, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
		{
				PORTD |= (1<<i);
				_delay_ms(500);
		}
		
		for (int k=7; k>=0; k--)
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	48 f7       	brcc	.-46     	; 0xaa <main+0x3e>
  d8:	cd cf       	rjmp	.-102    	; 0x74 <main+0x8>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
