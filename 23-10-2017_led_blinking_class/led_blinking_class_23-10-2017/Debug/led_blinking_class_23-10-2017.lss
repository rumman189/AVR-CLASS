
led_blinking_class_23-10-2017.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000624  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000165  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
    DDRD = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	/* Replace with your application code */
    while (1) 
    {
		for (int y=7; y>=0; y--)
		{
		PORTD = (1<<y);
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	70 e0       	ldi	r23, 0x00	; 0
    DDRD = 0xff;
	
	/* Replace with your application code */
    while (1) 
    {
		for (int y=7; y>=0; y--)
  74:	87 e0       	ldi	r24, 0x07	; 7
  76:	90 e0       	ldi	r25, 0x00	; 0
		{
		PORTD = (1<<y);
  78:	9b 01       	movw	r18, r22
  7a:	08 2e       	mov	r0, r24
  7c:	02 c0       	rjmp	.+4      	; 0x82 <main+0x16>
  7e:	22 0f       	add	r18, r18
  80:	33 1f       	adc	r19, r19
  82:	0a 94       	dec	r0
  84:	e2 f7       	brpl	.-8      	; 0x7e <main+0x12>
  86:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	34 e3       	ldi	r19, 0x34	; 52
  8c:	4c e0       	ldi	r20, 0x0C	; 12
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
    DDRD = 0xff;
	
	/* Replace with your application code */
    while (1) 
    {
		for (int y=7; y>=0; y--)
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	68 f7       	brcc	.-38     	; 0x78 <main+0xc>
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
		
		for (int x=0; x<8; x++)
		{
		//PORTD = (1<<x);
		//_delay_ms(500);
		PORTD &=~ (1<<x);
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	ab 01       	movw	r20, r22
  a6:	08 2e       	mov	r0, r24
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x42>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <main+0x3e>
  b2:	24 2f       	mov	r18, r20
  b4:	20 95       	com	r18
  b6:	23 23       	and	r18, r19
  b8:	22 bb       	out	0x12, r18	; 18
		_delay_ms(500);
		//PORTD &=~ (1<<y);
		//_delay_ms(0);
		}
		
		for (int x=0; x<8; x++)
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	91 05       	cpc	r25, r1
  c0:	81 f7       	brne	.-32     	; 0xa2 <main+0x36>
  c2:	d8 cf       	rjmp	.-80     	; 0x74 <main+0x8>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
